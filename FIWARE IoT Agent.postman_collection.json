{
	"info": {
		"_postman_id": "6a7f0535-e67c-4dba-a66a-537e2ec736bf",
		"name": "FIWARE IoT Agent",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Obtaining Version Information",
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": ""
				},
				"description": "Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary."
			},
			"response": []
		},
		{
			"name": "Register a service API key",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"services\": [\n   {\n     \"apikey\":      \"4jggokgpepnvsb2uv4s40d59ov\",\n     \"cbroker\":     \"http://orion:1026\",\n     \"entity_type\": \"Thing\",\n     \"resource\":    \"/iot/d\"\n   }\n ]\n}"
				},
				"url": {
					"raw": "http://{{iot-agent}}/iot/services",
					"protocol": "http",
					"host": [
						"{{iot-agent}}"
					],
					"path": [
						"iot",
						"services"
					]
				},
				"description": "xxx"
			},
			"response": []
		},
		{
			"name": "Get list of regsitered services",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					}
				],
				"body": {},
				"url": {
					"raw": "http://{{iot-agent}}/iot/services",
					"protocol": "http",
					"host": [
						"{{iot-agent}}"
					],
					"path": [
						"iot",
						"services"
					]
				},
				"description": "Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary."
			},
			"response": []
		},
		{
			"name": "Register a motion sensor device",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"devices\": [\n   {\n     \"device_id\":   \"motion01\",\n     \"entity_name\": \"urn:ngsd-ld:Motion:001\",\n     \"entity_type\": \"Motion\",\n     \"protocol\":    \"PDI-IoTA-UltraLight\",\n     \"timezone\":    \"Europe/Madrid\",\n     \"attributes\": [\n       {\n         \"object_id\": \"c\",\n         \"name\":      \"count\",\n         \"type\":      \"Integer\"\n       }\n     ]\n   }\n ]\n}\n"
				},
				"url": {
					"raw": "http://{{iot-agent}}/iot/devices",
					"protocol": "http",
					"host": [
						"{{iot-agent}}"
					],
					"path": [
						"iot",
						"devices"
					]
				},
				"description": "xxx"
			},
			"response": []
		},
		{
			"name": "Register a bell device",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"bell001\",\n      \"entity_name\": \"urn:ngsi-ld:Bell:001\",\n      \"entity_type\": \"Bell\",\n      \"protocol\": \"PDI-IoTA-UltraLight\",\n      \"transport\": \"HTTP\",\n      \"resource\": \"/iot/d\",\n      \"commands\": [ \n          { \"object_id\": \"ring\", \"name\": \"ring\", \"type\": \"string\" }\n       ],\n       \"static_attributes\": [\n          { \"name\": \"serialID\", \"type\": \"02598347\" }\n    \t]\n    }\n  ]\n}\n"
				},
				"url": {
					"raw": "http://{{iot-agent}}/iot/devices",
					"protocol": "http",
					"host": [
						"{{iot-agent}}"
					],
					"path": [
						"iot",
						"devices"
					]
				},
				"description": "xxx"
			},
			"response": []
		},
		{
			"name": "Get list of regsitered devices",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					}
				],
				"body": {},
				"url": {
					"raw": "http://{{iot-agent}}/iot/devices",
					"protocol": "http",
					"host": [
						"{{iot-agent}}"
					],
					"path": [
						"iot",
						"devices"
					]
				},
				"description": "Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary."
			},
			"response": []
		},
		{
			"name": "Obtain Entity Data by type Copy Copy",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "text/plain"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "t|39#l|1200"
				},
				"url": {
					"raw": "http://localhost:7896/iot/d?k=4jggokgpepnvsb2uv4s40d59ov&i=my_device_01",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "7896",
					"path": [
						"iot",
						"d"
					],
					"query": [
						{
							"key": "k",
							"value": "4jggokgpepnvsb2uv4s40d59ov"
						},
						{
							"key": "i",
							"value": "my_device_01"
						}
					]
				},
				"description": "This example returns the data of all `Store` entities within the context data"
			},
			"response": []
		},
		{
			"name": "Get list of sensors Copy",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					}
				],
				"body": {},
				"url": {
					"raw": "http://{{iot-agent}}/iot/devices",
					"protocol": "http",
					"host": [
						"{{iot-agent}}"
					],
					"path": [
						"iot",
						"devices"
					]
				},
				"description": "Once the IoT Agent is running, You can check the status by making an HTTP request to the exposed port. \nIf the response is blank, this is usually because the MongoDB database holding the context information is not running or not connected.\n\n>**Troubleshooting:** What if the response is blank ?\n>\n> * To check that a docker container is running try\n>\n>```bash\n>docker ps\n>```\n>\n>You should see several containers running. If `iot-agent` is not running, you can restart the containers as necessary."
			},
			"response": []
		},
		{
			"name": "Get a list of available services",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "store"
					},
					{
						"key": "fiware-servicepath",
						"value": "/motion"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"devices\": [\n    {\n      \"device_id\": \"MQTT_2\",\n      \"entity_name\": \"Second MQTT Device\",\n      \"entity_type\": \"AnMQTTDevice\",\n      \"timezone\": \"America/Santiago\",\n      \"protocol\": \"MQTT_UL\",\n      \"transport\": \"MQTT\",\n      \"commands\": [\n        {\n          \"name\": \"PING\",\n          \"type\": \"command\"\n        }\n      ]\n    }\n  ]\n}\n"
				},
				"url": {
					"raw": "http://{{iot-agent}}/iot/services",
					"protocol": "http",
					"host": [
						"{{iot-agent}}"
					],
					"path": [
						"iot",
						"services"
					]
				},
				"description": "xxx"
			},
			"response": []
		},
		{
			"name": "Obtain Entity Data by type Copy",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "fiware-service",
						"value": "openiot"
					},
					{
						"key": "fiware-servicepath",
						"value": "/"
					}
				],
				"body": {},
				"url": {
					"raw": "http://{{orion}}/v2/entities/",
					"protocol": "http",
					"host": [
						"{{orion}}"
					],
					"path": [
						"v2",
						"entities",
						""
					]
				},
				"description": "This example returns the data of all `Store` entities within the context data"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e64b3c59-ab46-46cf-b504-30a027ca2986",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "04676146-332d-41b3-a65e-b9fd5a527aca",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2474f6b4-9656-4c86-836d-96074b666504",
			"key": "iot-agent",
			"value": "localhost:4041",
			"type": "string",
			"description": ""
		},
		{
			"id": "d330b720-5938-46da-8927-13f9c1b1c735",
			"key": "orion",
			"value": "localhost:1026",
			"type": "string",
			"description": ""
		}
	]
}